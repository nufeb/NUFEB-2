<?xml version="1.0"?>
<definition xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <name>LPJML_crop_yield_code_v3f</name>
  <description>The LPJML emulator version 3f. The emulator was written by Oluwole Oyebamiji from the Open University and the BFG2 python wrapper was written by Rupert Ford from STFC. This model can be called in different ways. If the run() method is used then the setCoordinates() method must be called first. This version passes the input data via BFG2. Alternatively the runFileSync() method can be called. This version expects the input data to be provided by files externally to BFG2. In either case the setConfig() method can be optionally called. This method overwrites any preexisting configuration options. If the GEMINI coupling option is chosen then BFG2 returns the associated output data, however if other is chosen then BFG2 does not return any data (the data must be extracted from the output files).</description>
  <version interface="1.0.0"/>
  <type>scientific</type>
  <language>python</language>
  <entryPoints>

    <entryPoint type="constructor" name="constructor"/>

    <!-- only use this when the run entry-point is called -->
    <entryPoint type="init" name="setCoordinates">

      <data form="argpass">
        <array dimension="1">
          <scalar id="1" direction="in" dataType="float" name="lat"/>
          <dim value="1"><upper><integer>280</integer></upper></dim>
        </array>
      </data>

      <data form="argpass">
        <array dimension="1">
          <scalar id="2" direction="in" dataType="float" name="long"/>
          <dim value="1"><upper><integer>720</integer></upper></dim>
        </array>
      </data>

      <data form="argpass">
        <array dimension="1">
          <scalar id="3" direction="in" dataType="float" name="month"/>
          <dim value="1"><upper><integer>1200</integer></upper></dim>
        </array>
      </data>

    </entryPoint>

    <!-- optional initialisation of config information -->
    <entryPoint type="init" name="setConfig">

      <data form="argpass">
        <scalar id="1" direction="in" dataType="int" name="j"/>
      </data>
     
      <data form="argpass">
        <scalar id="2" direction="in" dataType="str" name="rcp"/>
      </data>
     
      <data form="argpass">
        <scalar id="3" direction="in" dataType="float" name="fertilisation"/>
      </data>
     
      <data form="argpass">
        <scalar id="4" direction="in" dataType="int" name="man"/>
      </data>
     
      <data form="argpass">
        <scalar id="5" direction="in" dataType="str" name="coupling"/>
      </data>
     
      <data form="argpass">
        <scalar id="6" direction="in" dataType="str" name="crop_type"/>
      </data>
     
    </entryPoint>

    <!-- run the model : input data is passed via files and we simply synchronise using BFG  -->
    <entryPoint type="iteration" name="runFileSync">

      <data form="argpass">
        <scalar id="1" direction="in" dataType="bool" name="go"/>
      </data>
     
     <data form="funcret">
       <array dimension="1" dataType="numpy.ndarray">
         <scalar id="1" direction="out" dataType="float" name="lat"/>
         <dim value="1"><upper><integer>50</integer></upper></dim>
       </array>
     </data>

     <data form="funcret">
       <array dimension="1" dataType="numpy.ndarray">
         <scalar id="2" direction="out" dataType="float" name="lon"/>
         <dim value="1"><upper><integer>50</integer></upper></dim>
       </array>
     </data>

     <data form="funcret">
       <array dimension="1" dataType="numpy.ndarray">
         <scalar id="3" direction="out" dataType="float" name="cereal"/>
         <dim value="1"><upper><integer>50</integer></upper></dim>
       </array>
     </data>

     <data form="funcret">
       <array dimension="1" dataType="numpy.ndarray">
         <scalar id="4" direction="out" dataType="float" name="rice"/>
         <dim value="1"><upper><integer>50</integer></upper></dim>
       </array>
     </data>

     <data form="funcret">
       <array dimension="1" dataType="numpy.ndarray">
         <scalar id="5" direction="out" dataType="float" name="maize"/>
         <dim value="1"><upper><integer>50</integer></upper></dim>
       </array>
     </data>

     <data form="funcret">
       <array dimension="1" dataType="numpy.ndarray">
         <scalar id="6" direction="out" dataType="float" name="oil"/>
         <dim value="1"><upper><integer>50</integer></upper></dim>
       </array>
     </data>

    </entryPoint>

    <!-- run the model : input data is passed via BFG : requires setConfig to have been run -->
    <entryPoint type="iteration" name="run">

      <data form="argpass">
        <array dimension="3">
          <scalar id="1" direction="in" dataType="float" name="cloud"/>
          <dim value="1"><upper><integer>720</integer></upper></dim>
          <dim value="2"><upper><integer>280</integer></upper></dim>
          <dim value="3"><upper><integer>1200</integer></upper></dim>
        </array>
      </data>

      <data form="argpass">
        <array dimension="3">
          <scalar id="2" direction="in" dataType="float" name="precipitation"/>
          <dim value="1"><upper><integer>720</integer></upper></dim>
          <dim value="2"><upper><integer>280</integer></upper></dim>
          <dim value="3"><upper><integer>1200</integer></upper></dim>
        </array>
      </data>

      <data form="argpass">
        <array dimension="3">
          <scalar id="3" direction="in" dataType="float" name="temperature"/>
          <dim value="1"><upper><integer>720</integer></upper></dim>
          <dim value="2"><upper><integer>280</integer></upper></dim>
          <dim value="3"><upper><integer>1200</integer></upper></dim>
        </array>
      </data>

      <data form="argpass">
        <array dimension="3">
          <scalar id="4" direction="in" dataType="float" name="wet_days"/>
          <dim value="1"><upper><integer>720</integer></upper></dim>
          <dim value="2"><upper><integer>280</integer></upper></dim>
          <dim value="3"><upper><integer>1200</integer></upper></dim>
        </array>
      </data>

     <data form="funcret">
       <array dimension="1" dataType="numpy.ndarray">
         <scalar id="1" direction="out" dataType="float" name="lat"/>
         <dim value="1"><upper><integer>50</integer></upper></dim>
       </array>
     </data>

     <data form="funcret">
       <array dimension="1" dataType="numpy.ndarray">
         <scalar id="2" direction="out" dataType="float" name="lon"/>
         <dim value="1"><upper><integer>50</integer></upper></dim>
       </array>
     </data>

     <data form="funcret">
       <array dimension="1" dataType="numpy.ndarray">
         <scalar id="3" direction="out" dataType="float" name="cereal"/>
         <dim value="1"><upper><integer>50</integer></upper></dim>
       </array>
     </data>

     <data form="funcret">
       <array dimension="1" dataType="numpy.ndarray">
         <scalar id="4" direction="out" dataType="float" name="rice"/>
         <dim value="1"><upper><integer>50</integer></upper></dim>
       </array>
     </data>

     <data form="funcret">
       <array dimension="1" dataType="numpy.ndarray">
         <scalar id="5" direction="out" dataType="float" name="maize"/>
         <dim value="1"><upper><integer>50</integer></upper></dim>
       </array>
     </data>

     <data form="funcret">
       <array dimension="1" dataType="numpy.ndarray">
         <scalar id="6" direction="out" dataType="float" name="oil"/>
         <dim value="1"><upper><integer>50</integer></upper></dim>
       </array>
     </data>

    </entryPoint>

  </entryPoints>
  <timestep units="hours">1</timestep>
</definition>
